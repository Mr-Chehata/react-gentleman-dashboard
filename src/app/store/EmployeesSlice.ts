import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { EmployeeInterface } from "../../models/Employee";
import { EmployeesService } from "../../services/EmployeesService";
import { RootState, AppThunk } from "../store";
/* import { fetchCount } from './counterAPI'; */

export interface EmployeesFetchState {
  emloyees: EmployeeInterface[];
  employee: EmployeeInterface | null;
  status: "idle" | "loading" | "failed";
}
const employeesService = new EmployeesService();

const initialState: EmployeesFetchState = {
  emloyees: [],
  employee: null,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchEmployees = createAsyncThunk("employees/getAll", async () => {
  const response = await employeesService.getEmployees();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const fetchEmployeeById = createAsyncThunk(
  "employees/getById",
  async (id: string) => {
    const response = await employeesService.getEmployeeById(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const EmployeesSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchEmployees.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEmployees.fulfilled, (state, action) => {
        state.status = "idle";
        state.emloyees = action.payload;
      })
      .addCase(fetchEmployees.rejected, (state) => {
        state.status = "failed";
      });

    builder
      .addCase(fetchEmployeeById.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchEmployeeById.fulfilled, (state, action) => {
        state.status = "idle";
        state.employee = action.payload;
      })
      .addCase(fetchEmployeeById.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getEmployeesStore = (state: RootState) => state.employees;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default EmployeesSlice.reducer;
